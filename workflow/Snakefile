configfile: "config/config.yaml"

workdir: config['workdir']

max_threads = config["max_threads_per_rule"]
seed = config["seed"]

genome = config["genome"]
samples = config["samples"]

def get_input_fastq(wildcards):
    return samples[wildcards.sample]["fastq"][wildcards.read]

def script_path(script_name):
    return str(workflow.source_path(script_name))


rule all:
    input: 
        expand("results/{sample}/fastqs/R1_trim.fastq.gz", sample=samples.keys()),
        expand("results/{sample}/mapping/possorted.bam", sample=samples.keys()),
        expand("results/{sample}/fragments/fragments.tar", sample=samples.keys()),
        expand("results/{sample}/qc/summary.txt", sample=samples.keys()),
        expand("results/{sample}/archr/indicator.txt", sample=samples.keys())
    onsuccess:
        shell("rm -r temp/")


"""
######################
Process FASTQs
######################
"""

rule strip_fastq:
    """
    Strip FASTQ header descriptions
    """
    input:
        get_input_fastq 
    output:
        pipe("temp/{sample}/fastqs/stripped_{read}.fastq")
    conda:
        "envs/fastqs.yaml"
    group: 
        "fastqs"
    shell:
        "zcat {input} | sed 's/ .*//' > {output}"

rule match_barcodes:  
    """
    Barcode correction and filtering
    """
    # base rule across technologies
    threads:
        max_threads
    conda:
        "envs/fastqs.yaml"
    group: 
        "fastqs"
    script:
        "scripts/match_barcodes.py"

use rule match_barcodes as match_barcodes_10x with:
    # config["technology"] == "10x"
    input: 
        fq_R1 = "temp/{sample}/fastqs/stripped_R1.fastq",
        fq_R2 = "temp/{sample}/fastqs/stripped_R2.fastq",
        fq_R3 = "temp/{sample}/fastqs/stripped_R3.fastq",
        wl_R2 = lambda w: samples[w.sample]["bc_whitelist"]["R2"]
    output: 
        fastq1_bc = temp("temp/{sample}/fastqs/R1_bc_10x.fastq"),
        fastq2_bc = temp("temp/{sample}/fastqs/R2_bc_10x.fastq"),
        qc_matching = "results/{sample}/qc/barcode_matching_10x.tsv"
    params:
        rc_R2 = lambda w: samples[w.sample]["bc_revcomp"]["R2"],
        barcode_dist = lambda w: samples[w.sample]["max_barcode_dist"],
        technology = "10x"

use rule match_barcodes as match_barcodes_multiome with:
    # config["technology"] == "multiome"
    input: 
        fq_R1 = "temp/{sample}/fastqs/stripped_R1.fastq",
        fq_R2 = "temp/{sample}/fastqs/stripped_R2.fastq",
        fq_R3 = "temp/{sample}/fastqs/stripped_R3.fastq",
        wl_R2 = lambda w: samples[w.sample]["bc_whitelist"]["R2"]
    output: 
        fastq1_bc = temp("temp/{sample}/fastqs/R1_bc_multiome.fastq"),
        fastq2_bc = temp("temp/{sample}/fastqs/R2_bc_multiome.fastq"),
        qc_matching = "results/{sample}/qc/barcode_matching_multiome.tsv"
    params:
        rc_R2 = lambda w: samples[w.sample]["bc_revcomp"]["R2"],
        barcode_dist = lambda w: samples[w.sample]["max_barcode_dist"],
        technology = "multiome"

use rule match_barcodes as match_barcodes_ren with:
    # config["technology"] == "ren"
    input:
        fq_R1 = "temp/{sample}/fastqs/stripped_R1.fastq",
        fq_R2 = "temp/{sample}/fastqs/stripped_R2.fastq",
        fq_I1 = "temp/{sample}/fastqs/stripped_I1.fastq",
        fq_I2 = "temp/{sample}/fastqs/stripped_I2.fastq",
        wl_I1 = lambda w: samples[w.sample]["bc_whitelist"]["I1"],
        wl_I2 = lambda w: samples[w.sample]["bc_whitelist"]["I2"]
    output: 
        fastq1_bc = temp("temp/{sample}/fastqs/R1_bc_ren.fastq"),
        fastq2_bc = temp("temp/{sample}/fastqs/R2_bc_ren.fastq"),
        qc_matching = "results/{sample}/qc/barcode_matching_ren.tsv"
    params:
        rc_I1 = lambda w: samples[w.sample]["bc_revcomp"]["I1"],
        rc_I2 = lambda w: samples[w.sample]["bc_revcomp"]["I2"],
        barcode_dist = lambda w: samples[w.sample]["max_barcode_dist"],
        technology = "ren"

rule trim_adapter:
    """
    Read adapter trimming
    """
    input:
        fastq1_bc = lambda w: f"temp/{w.sample}/fastqs/R1_bc_{samples[w.sample]['technology']}.fastq",
        fastq2_bc = lambda w: f"temp/{w.sample}/fastqs/R2_bc_{samples[w.sample]['technology']}.fastq"
    output:
        fastq1_trim = "results/{sample}/fastqs/R1_trim.fastq.gz",
        fastq2_trim = "results/{sample}/fastqs/R2_trim.fastq.gz",
        stats = "results/{sample}/qc/trim_adapters.txt"
    params:
        max_barcode_dist = lambda w: samples[w.sample]["max_barcode_dist"]
    log:
        html = "logs/{sample}/fastqs/fastp.html",
        json = "logs/{sample}/fastqs/fastp.json"
    threads:
        max_threads
    conda:
        "envs/fastqs.yaml"
    group: 
        "fastqs"
    shell:
        "fastp -i {input.fastq1_bc} -I {input.fastq2_bc} -o {output.fastq1_trim} -O {output.fastq2_trim}"
        " -h {log.html} -j {log.json} -G -Q -L -w {threads} 2> {output.stats}"


"""
######################
Map and filter reads
######################
"""

rule bowtie2:
    """
    Read mapping (Bowtie2 aligner)
    """
    input:
        fastq1 = "results/{sample}/fastqs/R1_trim.fastq.gz",
        fastq2 = "results/{sample}/fastqs/R2_trim.fastq.gz"
    output:
        bam_raw = pipe("temp/{sample}/mapping/raw.bam"),
    params:
        k = 1 + config["mapping"]["multimapping"],
        bwt2_idx = config["mapping"]["index"]
    log:
        "logs/{sample}/mapping/bwt2.log"
    threads:
        max_threads
    conda:
        "envs/mapping.yaml"
    group: 
        "mapping"
    shell:
        "bowtie2 -X 2000 --threads {threads} -x {params.bwt2_idx} "
        "-1 {input.fastq1} -2 {input.fastq2} --sam-append-comment -k {params.k} 2> {log} | "
        "samtools view -u -S - -o {output.bam_raw}"

rule filter_alignments:
    """
    Post-alignment filtering
    """
    input:
        "temp/{sample}/mapping/raw.bam"
    output:
        bam = pipe("temp/{sample}/mapping/filtered.bam"),
        read_count = temp("temp/{sample}/mapping/all_aligned.txt"),
    params:
        multimapping = config["mapping"]["multimapping"],
        mmp_path = script_path("scripts/assign_multimappers.py")
    conda:
        "envs/mapping.yaml"
    group: 
        "mapping"
    shell:
        "samtools view -h -f 2 {input} | "
        "python {params.mmp_path} --paired-end -k {params.multimapping} | "
        "samtools view -F 1804 -u - | tee {output.bam} | "
        "samtools view -f 3 -F 4 --no-header - | wc -l > {output.read_count}"

rule sort_alignments:
    """
    Sort and index alignments
    """
    input: 
        "temp/{sample}/mapping/filtered.bam"
    output: 
        bam = "results/{sample}/mapping/possorted.bam",
        bai = "results/{sample}/mapping/possorted.bam.bai"
    log:
        "logs/{sample}/mapping/sort.log"
    threads:
        max_threads
    conda:
        "envs/mapping.yaml"
    shadow: 
        "shallow"
    group: 
        "mapping"
    shell: 
        "samtools sort {input} -@ {threads} -o {output.bam} 2> {log}; "
        "samtools index {output.bam};"


"""
######################
Generate fragments
######################
"""

rule bam_to_frag: 
    """
    Convert BAM to fragment file
    """
    input:
        bam = "results/{sample}/mapping/possorted.bam",
        bai = "results/{sample}/mapping/possorted.bam.bai"
    output:
        pipe("temp/{sample}/fragments/fragments_unsorted.tsv")
    log:
        "logs/{sample}/fragments/sinto.log"
    threads:
        max_threads
    conda:
        "envs/fragments.yaml"
    group: 
        "fragments"
    shell:
        "sinto fragments -b {input.bam} -f {output} --min_mapq 0 --max_distance 2000 --min_distance 10 --barcodetag CB --nproc {threads} > {log}"

rule make_fragments:
    """
    Sort fragments and compute counts
    """
    input: 
        "temp/{sample}/fragments/fragments_unsorted.tsv"
    output: 
        fragments = temp("temp/{sample}/fragments/fragments_unfiltered.tsv"),
        dedup_count = temp("temp/{sample}/fragments/unique_aligned.txt")
    threads: 
        max_threads
    conda:
        "envs/fragments.yaml"
    group: 
        "fragments"
    shell: 
        "LC_ALL=C sort -k1,1 -k2,2n -k3,3n -k4,4 -t$'\\t' --parallel={threads} {input} | " # Sort the file by chr, start, end, then barcode_id
        "tee {output.fragments} | wc -l > {output.dedup_count}" # Save the count of total reads

rule remove_mito:
    """
    Remove mitochondrial chromosomes
    """
    input: 
        "temp/{sample}/fragments/fragments_unfiltered.tsv"
    output: 
        fragments = pipe("temp/{sample}/fragments/fragments_nomito.tsv"),
        read_count = temp("temp/{sample}/fragments/aligned_no_mito.txt")
    conda:
        "envs/fragments.yaml"
    group: 
        "fragments"
    shell: 
        "grep -v '^chrM' {input} | "
        "tee {output.fragments} | "
        "wc -l > {output.read_count}"

rule filter_blacklist_and_compress:
    """
    Filter blacklist, calculate duplicate stats, and make tabix
    """
    input: 
        "temp/{sample}/fragments/fragments_nomito.tsv"
    output: 
        fragments = "results/{sample}/fragments/fragments.tsv.gz",
        index = "results/{sample}/fragments/fragments.tsv.gz.tbi",
        stats = "results/{sample}/qc/duplicate_stats.tsv"
    params:
        blacklist_file = config["blacklist"],
        duplicate_stats = srcdir("scripts/duplicate_stats.awk")
    conda:
        "envs/fragments.yaml"
    group: 
        "fragments"
    shell: 
        "bedtools subtract -a {input} -b {params.blacklist_file} -A | " # Remove regions from blacklist
        "tee >(awk -f {params.duplicate_stats} > {output.stats}) | "
        "bgzip > {output.fragments}; "
        "tabix --zero-based --preset bed {output.fragments}"

rule frag_tar: 
    """
    Package fragments + index into tarball
    """
    input:
        frag = "results/{sample}/fragments/fragments.tsv.gz",
        frag_ind = "results/{sample}/fragments/fragments.tsv.gz.tbi"
    output:
        "results/{sample}/fragments/fragments.tar",
    conda:
        "envs/fragments.yaml"
    group: 
        "fragments"
    shell:
        "tar -cf {output} {input.frag} {input.frag_ind}"

rule stats_summary:
    """
    Aggregate fragments QC
    """
    input:
        barcode_matching = lambda w: f"results/{w.sample}/qc/barcode_matching_{samples[w.sample]['technology']}.tsv",
        adapter_stats = "results/{sample}/qc/trim_adapters.txt",
        total_align = "temp/{sample}/mapping/all_aligned.txt",
        unique_align = "temp/{sample}/fragments/unique_aligned.txt",
        no_mito = "temp/{sample}/fragments/aligned_no_mito.txt",
        duplicate_stats = "results/{sample}/qc/duplicate_stats.tsv"
    output: 
        "results/{sample}/qc/summary.txt"
    conda:
        "envs/fragments.yaml"
    group: 
        "fragments"
    script: 
        "scripts/summarize_fragment_stats.py"


"""
######################
ArchR analyses
######################
"""

rule archr_build:
    """
    Preliminary ArchR analyses
    """
    input:
        frag = "results/{sample}/fragments/fragments.tsv.gz",
        frag_ind = "results/{sample}/fragments/fragments.tsv.gz.tbi"
    output:
        # arrows_temp_dir = temp(directory("temp/{sample}/archr/arrows_init")),
        qc_dir = directory("results/{sample}/qc/archr"),
        project_dir = directory("results/{sample}/archr/project"),
        indicator = touch("results/{sample}/archr/indicator.txt")
    params:
        sample_name = lambda w: w.sample,
        seed = seed,
        genome = genome
    log:
        console = "logs/{sample}/archr/console.log",
        arrow_create = "logs/{sample}/archr/arrow_create.log",
        doublets = "logs/{sample}/archr/doublets.log",
        lsi = "logs/{sample}/archr/lsi.log",
        cluster = "logs/{sample}/archr/cluster.log",
        marker_genes = "logs/{sample}/archr/marker_genes.log",
        pseudobulk_rep = "logs/{sample}/archr/pseudobulk_rep.log",
        peak_call = "logs/{sample}/archr/peak_call.log",
        peak_matrix = "logs/{sample}/archr/peak_matrix.log",
        marker_peaks = "logs/{sample}/archr/marker_peaks.log",
        fetch_motif = "logs/{sample}/archr/fetch_motif.log",
        enr_motif = "logs/{sample}/archr/enr_motif.log",
        fetch_tf = "logs/{sample}/archr/fetch_tf.log",
        enr_tf = "logs/{sample}/archr/enr_tf.log",
        save = "logs/{sample}/archr/save.log"
    threads:
        max_threads
    conda:
        "envs/archr.yaml"
    group:
        "archr"
    shadow: 
        "shallow"
    script:
        "scripts/build_archr_project.R"